/*
 * Copyright(C) 2005 Ruijie Network. All rights reserved.
 */
/*
 * capture.c
 * Original Author:  zhuximin@ruijie.com.cn, 2018-3-6
 *
 * Capture frames that pass through the network card and
 * record access to a specific url to EXCEL.
 *
 * History
 *
 * v1.1     zhuximin@ruijie.com.cn        2018-4-9
 *          Added the ability to record access records.
 *
 */
#include <stdio.h>
#include <unistd.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netinet/ether.h>
#include <string.h>
#include <signal.h>
#include <stdlib.h>
#include <time.h>

#define BUF_MAX         1522                          /* Maximum length of Ethernet frame */
#define ETH_HEAD        14                            /* The head of Ethernet frame */
#define MAX             100000                        /* The maximum number of capturing */
#define IP_BUF_SIZE     50                            /* The length of ip_buf array */
#define TIME_BUF_SIZE   50                            /* The length of time_buf array */
#define IP_LEN          20                            /* The length of IP head */
#define TCP_LEN         20                            /* The length of TCP head */
#define URL             "/meol"                       /* specify url path */
#define METHOD          "GET"                         /* http method */
#define EXCEL_FILE      "test.csv"                    /* The filename of excel */
#define URL_MAX_SIZE    128                           /* the maximum length of url_buf */
#define METHOD_MAX_SIZE 10                            /* the length of method buf */
 
char ip_buf[IP_BUF_SIZE];                             /* an array of store ip */
char time_buf[TIME_BUF_SIZE];                         /* an array of store time */

static void wt_ip_buf(unsigned char *ip_head);
static void http_base(unsigned char *http_head);
static void anlys_frame(unsigned char *buf, int n);
static void stop(int signo);

void wt_ip_buf(unsigned char *ip_head) {
    sprintf(ip_buf, "%u.%u.%u.%u",
            (unsigned char)*(ip_head + 12), (unsigned char)*(ip_head + 13),
            (unsigned char)*(ip_head + 14), (unsigned char)*(ip_head + 15));
}

void http_base(unsigned char *http_head) {
    time_t timep;
    struct tm *p;
    unsigned char meth[METHOD_MAX_SIZE];
    unsigned char url[URL_MAX_SIZE];
    FILE *fp;

    strncpy((char *)meth, (const char *)(http_head), sizeof(METHOD) - 1);
    strncpy((char *)url, (const char *)(http_head + 4), sizeof(URL) - 1);

    if ((strncmp((const char*)meth, METHOD, sizeof(METHOD) - 1) == 0) 
            && strncmp((const char*)url, URL, sizeof(URL - 1)) == 0) {
        time(&timep);
        p = localtime(&timep);
        sprintf(time_buf, "%04d-%02d-%02d %02d:%02d:%02d",
            p->tm_year + 1900, p->tm_mon + 1, p->tm_mday,
            p->tm_hour, p->tm_min, p->tm_sec);

        fp = fopen(EXCEL_FILE, "a+");
        if (fp == NULL) {
            printf("Fopen error!\n");
            return;
        }

        if (fp) {
            fprintf(fp, "%s, %s\n", ip_buf, time_buf);
        }
        
        fclose(fp);
    }
}

static void anlys_frame(unsigned char *buf, int n) {
    unsigned char *iphead;
    unsigned char *httphead;

    if (buf == NULL) {
        printf("The array of data frames is empty!\n");
        return;
    }

    iphead = buf + ETH_HEAD;
    if (*iphead == 0x45) {
        printf("Source IP address: %d.%d.%d.%d\n",
            iphead[12], iphead[13], iphead[14], iphead[15]);
        printf("Destination IP address: %d.%d.%d.%d\n",
            iphead[16], iphead[17], iphead[18], iphead[19]);
    }
    (void)wt_ip_buf(iphead);

    if (*(iphead + IP_LEN + 2) == 0x00 && *(iphead + IP_LEN + 3) == 0x50) {
        httphead = iphead + IP_LEN + TCP_LEN;
        (void)http_base(httphead);
    }

    printf("\n");
}

static void stop(int signo) {
    printf("Program terminated!\n");
    exit(0);
}

int main(void) 
{
    int raw_sock;                                /* Original socket */
    int n;                                       /* The length of data frame captured */
    unsigned char buf[BUF_MAX];                  /* An array of data frames */
    int sum;

    raw_sock = socket(PF_PACKET, SOCK_RAW, htons(ETH_P_ALL));
    if (raw_sock < 0) {
        printf("Failed to create the original socket!\n");
        return -1;
    }

    sum = 0;
    while (sum < MAX) {
        n = recvfrom(raw_sock, buf, sizeof(buf), 0, NULL, NULL);

        if (n < 42) {
            printf("Incomplete Ethernet frames!\n");
            close(raw_sock);
            return -1;
        }

        printf("Capturing %d bytes of data frames.\n", n);
        (void)anlys_frame(buf, n);
        sum++;
        (void)signal(SIGINT,stop);
    }

    close(raw_sock);
    printf("The capture process captured a total of %d data frames.\n", sum);

    return 0;
}
